"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRandom = createRandom;
exports.createRandomIndex = createRandomIndex;
exports.createChoice = createChoice;
exports.createSample = createSample;
exports.createDangerousButPerformantSample = createDangerousButPerformantSample;
exports.createShuffle = createShuffle;
exports.createShuffleInPlace = createShuffleInPlace;
exports.weightedRandomIndex = weightedRandomIndex;
/**
 * Talisman helpers/random
 * ========================
 *
 * Helpers concerning random-handling functions.
 */

/**
 * Creating a function returning a random integer such as a <= N <= b.
 *
 * @param  {function} rng - RNG function returning uniform random.
 * @return {function}     - The created function.
 */
function createRandom(rng) {

  return function (a, b) {
    return a + Math.floor(rng() * (b - a + 1));
  };
}

/**
 * Returning default random using `Math.random`.
 */
var random = exports.random = createRandom(Math.random);

/**
 * Creating a function returning a random index from the given array.
 *
 * @param  {function} rng - RNG function returning uniform random.
 * @return {function}     - The created function.
 */
function createRandomIndex(rng) {
  var customRandom = createRandom(rng);

  return function (array) {
    return customRandom(0, array.length - 1);
  };
}

/**
 * Returning default random index using `Math.random`.
 */
var randomIndex = exports.randomIndex = createRandomIndex(Math.random);

/**
 * Creating a function returning a random item from the given array.
 *
 * @param  {function} rng - RNG function returning uniform random.
 * @return {function}     - The created function.
 */
function createChoice(rng) {
  var customRandomIndex = createRandomIndex(rng);

  return function (array) {
    return array[customRandomIndex(array)];
  };
}

/**
 * Returning default choice using `Math.random`.
 */
var choice = exports.choice = createChoice(Math.random);

/**
 * Creating a function returning a sample of size n using the provided RNG.
 *
 * @param  {function} rng - The RNG to use.
 * @return {function}     - The created function.
 */
function createSample(rng) {
  var customRandom = createRandom(rng);

  return function (n, sequence) {
    var result = sequence.slice(),
        lastIndex = result.length - 1;

    var index = -1;

    while (++index < n) {
      var r = customRandom(index, lastIndex),
          value = result[r];

      result[r] = result[index];
      result[index] = value;
    }

    // Clamping the array
    result.length = n;

    return result;
  };
}

/**
 * Exporting default sample function.
 */
var sample = exports.sample = createSample(Math.random);

/**
 * Creating a function returning a sample of size n using the provided RNG in
 * a performant but dangerous way. O(k) time & space is achieved by mutating
 * the target array and restoring it back to its original state afterwards.
 *
 * @param  {function} rng - The RNG to use.
 * @return {function}     - The created function.
 */
function createDangerousButPerformantSample(rng) {
  var customRandom = createRandom(rng);

  return function (n, sequence) {
    var result = new Array(n),
        swaps = new Array(n),
        lastIndex = sequence.length - 1;

    var index = -1;

    while (++index < n) {
      var r = customRandom(index, lastIndex),
          value = sequence[r];

      sequence[r] = sequence[index];
      sequence[index] = value;
      result[index] = value;

      // Storing the swap so we can reverse it
      swaps[index] = r;
    }

    // Reversing the mutations
    while (--index >= 0) {
      var swap = swaps[index],
          _value = sequence[index];

      sequence[index] = sequence[swap];
      sequence[swap] = _value;
    }

    return result;
  };
}

/**
 * Exporting default sample function.
 */
var dangerousButPerformantSample = exports.dangerousButPerformantSample = createDangerousButPerformantSample(Math.random);

/**
 * Creating a function returning a shuffled array.
 *
 * @param  {function} rng - The RNG to use.
 * @return {function}     - The created function.
 */
function createShuffle(rng) {
  var customSample = createSample(rng);

  return function (sequence) {
    return customSample(sequence.length, sequence);
  };
}

/**
 * Exporting default shuffle function.
 */
var shuffle = exports.shuffle = createShuffle(Math.random);

/**
 * Creating a function shuffling an array in place.
 *
 * @param  {function} rng - The RNG to use.
 * @return {function}     - The created function.
 */
function createShuffleInPlace(rng) {
  var customRandom = createRandom(rng);

  return function (sequence) {
    var length = sequence.length,
        lastIndex = length - 1;

    var index = -1;

    while (++index < length) {
      var r = customRandom(index, lastIndex),
          value = sequence[r];

      sequence[r] = sequence[index];
      sequence[index] = value;
    }
  };
}

/**
 * Exporting default shuffle in place function.
 */
var shuffleInPlace = exports.shuffleInPlace = createShuffleInPlace(Math.random);

/**
 * Function taking a length and a list of weights and aiming at
 * returning a random weighted index.
 *
 * @param {array}  weights - List of weights (must sum to 1).
 * @param {number}         - The random weighted index.
 */
function weightedRandomIndex(weights) {
  var target = Math.random(),
      length = weights.length;

  var sum = 0;

  for (var i = 0; i < length; i++) {
    sum += weights[i];

    if (target <= sum) return i;
  }

  return length - 1;
}